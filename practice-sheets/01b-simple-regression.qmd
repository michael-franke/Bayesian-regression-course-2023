---
title: "Bayesian regression: theory & practice"
subtitle: "01b: Simple linear regression"
author: "Michael Franke & Timo Roettger"
format: html
editor: visual
execute:
  error: false
  warning: false
  message: false
callout-appearance: simple
---

{{< include 00-preamble.qmd >}}

# Simple linear regression

Let's use the `dolphin` data set to practice Bayesian linear regression modeling.

```{r}
dolphin <- aida::data_MT
```

Let's start by asking: **how is the area-under-the-curve (AUC) related to the maximum absolute deviation (MAD)?** We could hypothesize that they are strongly related, right? The more the cursor strives toward the competitor, the larger is the overall area under the curve.

First, we will massage the data a little bit. We only want to look at those rows in which the participant selected the correct response. And instead of looking at all the data, we will only deal with the median values for each participant. In this way, we get a more robust signal (but really we do this here for more practical purposes (faster fitting, less clutter)).

## Data wrangling

```{r}

# aggregate
dolphin_agg <- dolphin |> 
  filter(correct == 1) |> 
  group_by(subject_id) |> 
  dplyr::summarize(
            AUC = median(AUC, na.rm = TRUE),
            MAD = median(MAD, na.rm = TRUE)) 
  
# let's have a look
head(dolphin_agg)
```

## Visual assessment

Before we start thinking about statistical inference, we always want to get a feel for the data visually. You basically always want to plot the data.

```{r}

# plot
ggplot(data = dolphin_agg, 
       aes(x = MAD, 
           y = AUC)) + 
  geom_point(size = 3, alpha = 0.3) 
  
```

This graph displays the distribution of AUC and MAD values.

Looking at the plot, we can see that there is a strong relationship between AUC and MAD. And that makes a lot of sense. The larger the cursor strives toward the competitor, the larger is the overall area under the curve. Heureka! Our hypothesis is confirmed.

But wait! As Bayesians, we would like to translate the data into an expression of **evidence**: do the data provide evidence for our research hypotheses? Also, notice that there is some variability. We want precise estimates of potential effects. We also want a measure of how certain we can be about these estimates.

## Bayesian linear regression with `brms`

The `brms` package allows us to run Bayesian regression models, both simple and rather complex. It uses a sampling method, so its output will be vectors of (corellated) samples from the posterior distribution of the model's parameters. (We will learn how this sampling method works later).

So, to quantify evidence and uncertainty with posterior samples, let's run a simple linear regression model using `brms`. We use the R notation that some of your might already be familiar with when using `lm()`. We specify a formula in which AUC is predicted by MAD.

`AUC ~ MAD`

When you run this code, the `brms` package generates Stan code and runs the Stan program in the background. Stan code is executed in C++, and the model will be 'compiled' (you get information about this in the console output). We will learn later what this compilation does (spoiler: it computes gradients for all stochastic nodes in the model). The only thing that is relevant for you at the moment is this: This compilation can take quite a while (especially for complex models) before anything happens.

```{r}
#| output: false 
  
# specify the model 
model1 = brm(
  # model formula
  AUC ~ MAD, 
  # data
  data = dolphin_agg
  )
```

```{r}
summary(model1)
```

The output of such a model looks very familiar if you have worked with lm() before. We want to look at what is here called "Population-Level Effects", which is a small table in this case. The first column contains the names of our coefficients; the `Estimate` column gives us the posterior mean of these coefficients; the `Est.Error` give us the standard error; the `l-95%`and `u-95%` give us the lower and upper limit of the 95% Credible Interval (henceforth CrI). The column `Rhat` (R\^) which is a diagnostic of chain convergence and should not diverge much from 1 (rule of thumb: should by \<1.1). Again, more about that later. The `Bulk_ESS` and `Tail_ESS` columns give us numbers of "useful" samples. This number should be sufficiently high. If its not, `brms` will give you a convenient warning (more about that later, so don't worry for now). If that happens, you need to increase the chains and / or the number of iterations in order to increase the overall number of samples (again, don't worry for now).

If we need the main summary output in a tidy tibble format, we can use this function from the `tidybayes` package:

```{r}
tidybayes::summarise_draws(model1)
```

The model output suggests that the posterior mean of the Intercept is around `r tidybayes::summarise_draws(model1)[1, "mean"] |> round(0)` . The coefficient for MAD is estimated to be about `r tidybayes::summarise_draws(model1)[2, "mean"] |> round(0)`.

To see how good a fit this is, we should manually draw this line into the graph from above.

```{r}

# extract model parameters:
model_intercept <- summary(model1)$fixed[1,1]
model_slope <- summary(model1)$fixed[2,1]

# plot
ggplot(data = dolphin_agg, 
       aes(x = MAD, 
           y = AUC)) + 
  geom_abline(intercept = model_intercept, slope = model_slope, color = project_colors[2], size  = 1) +
  geom_point(size = 3, alpha = 0.3, color = project_colors[1])
  
```

Looking at the graph, it does make sense, right? The red line seems to capture the main trend pretty well.

Now is there a relationship between AUC and MAD? What would it mean if there was *no* relationship between these two measures? Well no relationship would mean a slope of 0. How would that look like?

```{r}

ggplot(data = dolphin_agg, 
       aes(x = MAD, 
           y = AUC)) + 
  geom_abline(intercept = model_intercept, slope = model_slope, color = project_colors[2], size = 1) +
  geom_abline(intercept = model_intercept, slope = 0, color = project_colors[3], size = 1, lty = "dashed") +
  geom_point(size = 3, alpha = 0.3, color = project_colors[1])
  
```

These lines look quite different indeed. But Bayesian data analysis does not give us only one single line. It gives us *infinitely many* lines, weighted by plausibility. Let's explore this universe of weighted predictions.

## Extracting posterior distributions and plotting them

We can interpret and visualize our coefficients immediately. We can create a data frame with all posterior samples for each parameter and plot those distributions for all coefficients. Let's first see what coefficients there are with the `get_variables()` function from the `tidybayes` package.

```{r}

# inspect parameters
tidybayes::get_variables(model1)

```

Everything that is preceded by a `b_` is a population level coefficients, i.e. our predictors. Now let's wrangle this data frame to get what we need. You don't have to entirely understand the following code, but make sure you understand it well enough to recycle it later on.

```{r posteriors1}

# wrangle data frame
posteriors1 <- model1 |>
  tidybayes::spread_draws(b_MAD, b_Intercept) |>
  select(b_MAD, b_Intercept)

posteriors1

```

Now that we know how to extract posterior samples, let's actually take a bunch of these samples and plot them as lines into our scatter plot from above. In this code chunk we generate a subsample of 100 parameter pairs.

```{r regressionLines, fig.width = 5, fig.align = "center"}

# wrangle data frame
posteriors2 <- model1 |>
  # parameter 'ndraws' requests 100 random subsamples
  tidybayes::spread_draws(b_MAD, b_Intercept, ndraws = 100) |>
  select(b_MAD, b_Intercept)
  
# plot
ggplot(data = dolphin_agg, 
       aes(x = MAD, 
           y = AUC)) + 
  geom_abline(data = posteriors2,
              aes(intercept = b_Intercept, slope = b_MAD), 
              color = project_colors[2], size  = 0.1, alpha = 0.4) +
  geom_point(size = 3, alpha = 0.3, color = project_colors[1]) +
  theme_aida()
  
```

Given our model, assumptions and data, these are 100 plausible regression lines. As you can see they are very similar.

Using this pipeline we can also calculate the mean of the posteriors and any kind of Credible Interval (CrI). We first extract the posterior and bring them into a tidy form. Let's only look at the coefficient for MAD here.

```{r posteriors2}

posteriors3 <- model1 |>
   # use the gather_draws() function for "long data"
   tidybayes::gather_draws(b_MAD) |> 
   # change names of columns
   rename(parameter = .variable,
          posterior = .value) |> 
   # select only those columns that are relevant
   select(parameter, posterior)

head(posteriors3)
```

And then calculate the mean, the lower and the upper bound of a 90% CrI, using the function `tidybayes::hdi()`.

```{r posteriors3}

# get posteriors for the relevant coefficients
posteriors3_agg <- posteriors3 |> 
  group_by(parameter) |> 
  summarise(
    `90lowerCrI`   = tidybayes::hdi(posterior, credMass = 0.90)[1],
    mean_posterior = mean(posterior),
    `90higherCrI`  = tidybayes::hdi(posterior, credMass = 0.90)[2])

posteriors3_agg 

```

Now we use this newly created data frame to plot the posterior distributions of all population-level coefficients. Again, we use our new best friend, the `tidybayes` package which offers some sweet extensions to `ggplot`'s `geom_` family of functions. We also add a reference point to compare the posteriors against. A common and reasonable reference point is 0. Remember a slope coefficient of zero would correspond to a flat regression line.

```{r}
#| warning: false

# plot the regression coefficients
posteriors1 |> 
  pivot_longer(cols = everything(), names_to = "parameter", values_to = "posterior") |> 
  ggplot(aes(x = posterior, y = parameter, fill = parameter)) + 
    # plot density w/ 90% credible interval
    tidybayes::stat_halfeye(.width = 0.9) +
    # add axes titles
    xlab("") +
    ylab("") +
    # adjust the x-axis 
    scale_x_continuous(limits = c(-100,600)) +
    # add line for the value zero
    geom_segment(x = 0, xend = 0, y = Inf, yend = -Inf,
                 lty = "dashed") +
    theme(legend.position="none")

posteriors3_agg[1,2]

```

Here you see density plots for our critical coefficients of the model. We care mostly about the slope coefficient (b_MAD) (the posterior of which is shown in red). Values between about `r posteriors3_agg[1,2]` and about `r posteriors3_agg[1,4]` are plausible (at the 90% level) and they are indicated by the thick black line in the density plot for this coefficient. The mean of the distribution is indicated by the thick black dot.

That's helpful because we can relate this distribution to relevant values, for example the value 0 (dashed line). If you look at the coefficient, you can see that the posterior distribution does not include the value zero or any small-ish "Region of Practical Equivalence" around it. In fact, the posterior is really far away from zero. Thus, if we believe in the data and the model, we can be very certain that this coefficient is not zero. In other words, we would be very certain that there is a positive relationship between AUC and MAD (and in turn that 'no relationship' is not a very plausible scenario).

The `brms` package allows us to quickly evaluate how many posterior samples fall into a certain value range. Just for fun, let's calculate the amount of posterior samples that are larger than 450. The following code chunk does this for us:

```{r posterior_probability}

hypothesis(model1, 'MAD > 450')

```

The results tell us that more than 60% of all posterior samples are larger than 450. It also tells us the evidence ratio (more on this later), which is the odds of the hypothesis in question (here 'MAD \> 450).

## Exercises for simple regression modeling

::: callout-caution
**Exercise 1a**

Massage the data and create a new dataset that contains only correct responses and only the mean values of the RT and the AUC measurement for each participant (`subject_id`). Print out the `head` of the dataset.
:::

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show solution"

# aggregate
dolphin_agg <- dolphin |> 
  filter(correct == 1) |> 
  group_by(subject_id) |> 
  dplyr::summarize(AUC = mean(AUC, na.rm = TRUE),
            RT = mean(RT, na.rm = TRUE))
  
# let's have a look
head(dolphin_agg)

```

We know from the previous exercises (walkthrough) that the area-under-the-curve (AUC) is related to the maximum absolute deviation (MAD). But what about reaction times (RTs)? Isn't it plausible that RTs are also related to AUC? The further I curve away from the target with the cursor, the longer it takes me to arrive at the target, right?

::: callout-caution
**Exercise 1b**

Plot the relationship between RT and AUC in a scatterplot.
:::

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show solution"

# plot
ggplot(data = dolphin_agg, 
       aes(x = RT, 
           y = AUC)) + 
  geom_point(size = 3, alpha = 0.3)
  
```

::: callout-caution
**Exercise 1c**

Run a linear regression using `brms`. AUC is the dependent variable (i.e. the measure) and RT is the independent variables (i.e. the predictor). The formula writes: `AUC ~ RT`
:::

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show solution"

# specify the model 
model1 <- brm(
  # model formula
  AUC ~ RT, 
  # data
  data = dolphin_agg
  )

summary(model1)

```

::: callout-caution
**Exercise 1d**

Look at the model output. Think of it in terms of a line in the scatterplot from (1b). Where does the regression line cross the y-axis, what is the slope of the line? Draw a scatterplot of AUC against RT and add the predicted values as a line.
:::

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show solution"

# extract model parameters:
model_intercept <- summary(model1)$fixed[1,1]
model_slope <- summary(model1)$fixed[2,1]

# plot
ggplot(data = dolphin_agg, 
       aes(x = RT, 
           y = AUC)) + 
  geom_abline(aes(intercept = model_intercept, slope = model_slope),
              color = project_colors[2], size = 2) +
  geom_point(size = 3, alpha = 0.3)
  
```

That doesn't really look like a tight linear relationship, right? If there is any relationship, AUC values become lower with longer reaction times (the line has a negative slope).

::: callout-caution
**Exercise 1e**

Now create a new data frame which contains the extracted posteriors for `b_RT` from the model output (use the `spread_draws()` function). Print out the `head` of the new dataset.
:::

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show solution"

# get posteriors for the relevant coefficients
posteriors1 <- model1 |>
  # use the spread_draws() function of tidybayes for all relevant parameters
  spread_draws(b_RT) |>
  # select only those columns that are relevant
  select(b_RT) |> 
  # bring into long format
  gather(key = "parameter", value = "posterior")
  
head(posteriors1)

```

::: callout-caution
**Exercise 1f**

Plot the results with the \`geom_halfeyeh() function. Add a vertical line at zero.
:::

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show solution"

# plot the regression coefficients
  ggplot(posteriors1, aes(x = posterior, y = parameter)) + 
    # plot density 
    tidybayes::stat_halfeye(.width = 0.95) +
    # add axes titles
    xlab("\nb_RT posterior distribution") +
    ylab("") +
    # adjust the x-axis 
    scale_x_continuous(expand = c(0, 0), limits = c(-100,100)) +
    # add line for the value zero
    geom_segment(x = 0, xend = 0, y = Inf, yend = -Inf,
                 lty = "dashed")

```

Now: What is the picture telling us? Is there reason to believe in a relationship between AUC and RT? Think about it!

There is no compelling support for a belief in a relationship between AUC and RT. The value zero (no relationship) is contained in the 95% CrI and a non-trivial amount of posterior samples is larger than 0.
